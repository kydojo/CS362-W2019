        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 29 returned 100% blocks executed 100%
       29:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       29:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       29:  209:  if (state->deckCount[player] < 1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       13:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      560:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      400:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 9 returned 100% blocks executed 100%
        9:  311:int numHandCards(struct gameState *state) {
        9:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 18 returned 100% blocks executed 100%
       18:  320:int supplyCount(int card, struct gameState *state) {
       18:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 23 returned 100% blocks executed 100%
       23:  346:int whoseTurn(struct gameState *state) {
       23:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 100%
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:  		{
      125:  404:      if (state->supplyCount[i] == 0) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        6:  405:	  	j++;
        -:  406:	}
        -:  407:    }
        5:  408:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  409:    {
        1:  410:      return 1;
        -:  411:    }
        -:  412:
        4:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 70 returned 100% blocks executed 85%
       70:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
       70:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       13:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       13:  537:    state->deckCount[player] = state->discardCount[player];
       13:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       13:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       13:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       13:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       13:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       13:  558:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       57:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       57:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       57:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       57:  575:    state->deckCount[player]--;
       57:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       57:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 1 returned 100% blocks executed 10%
        1:  582:int getCost(int cardNumber)
        -:  583:{
        1:  584:  switch( cardNumber ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:
        -:  649:
        -:  650:
        -:  651:
        -:  652:// Assignment 2 card functions *********************************************
        -:  653:
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  654:int smithyEffect( int currentPlayer, struct gameState *state, int handPos ) {
        -:  655:
        -:  656:   //+2 Cards (altered from +3 cards)
        3:  657:   for (int i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  658:	{
        2:  659:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  660:	}
        -:  661:			
        -:  662:   //discard card from hand
        1:  663:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  664:	return 0;
        -:  665:
        -:  666:}
        -:  667:
        -:  668:
function adventurerEffect called 1 returned 100% blocks executed 67%
        1:  669:int adventurerEffect( int currentPlayer, struct gameState *state, int drawntreasure, int cardDrawn, int temphand[], int z ) {
        -:  670:
        5:  671:   while ( drawntreasure < 3 ) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  672:		if ( state->deckCount[currentPlayer] < 1 ) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  673:	  		shuffle(currentPlayer, state);
call    0 never executed
        -:  674:		}
        -:  675:	
        3:  676:		drawCard( currentPlayer, state );
call    0 returned 100%
        3:  677:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  678:	
        3:  679:		if ( cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)  {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        3:  680:			drawntreasure++;
        -:  681:		}
        -:  682:		else {
    #####:  683:	  		temphand[z]=cardDrawn;
    #####:  684:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  685:			z++;
        -:  686:		}
        -:  687:   }
        -:  688:   
        2:  689:	while ( z-1 >= 0 ) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  690:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  691:		z=z-1;
        -:  692:   }
        -:  693:   
        1:  694:	return 0;			
        -:  695:}
        -:  696:
        -:  697:
function councilRoomEffect called 1 returned 100% blocks executed 100%
        1:  698:int councilRoomEffect( int currentPlayer, struct gameState *state, int handPos ) {
        -:  699:   //+3 Cards
        4:  700:   for ( int i = 0; i < 3; i++ ) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  701:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  702:	}
        -:  703:    
        -:  704:	//+2 Buy
        1:  705:   state->numBuys++;
        1:  706:   state->numBuys++;
        -:  707:			
        -:  708:   //Each other player draws a card
        3:  709:   for ( int i = 0; i < state->numPlayers; i++ ) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  710:		if ( i != currentPlayer ) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  711:	   	drawCard(i, state);
call    0 returned 100%
        -:  712:	   }
        -:  713:	}
        -:  714:			
        -:  715:   //put played card in played card pile
        1:  716:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  717:			
        1:  718:   return 0;
        -:  719:}
        -:  720:
function villageEffect called 2 returned 100% blocks executed 100%
        2:  721:int villageEffect( int currentPlayer, struct gameState *state, int handPos ) {
        -:  722:	//+10 Cards
       22:  723:	for ( int i = 0; i < 10; i++ ) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  724:   	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  725:	}
        -:  726:			
        -:  727:   //+5 Actions
        2:  728:	state->numActions = state->numActions + 5;
        -:  729:			
        -:  730:   //discard played card from hand
        2:  731:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  732:   
        2:  733:	return 0;
        -:  734:}
        -:  735:
        -:  736:
        -:  737:// No bugs introduced
function greatHallEffect called 1 returned 100% blocks executed 100%
        1:  738:int greatHallEffect( int currentPlayer, struct gameState *state, int handPos ) {
        -:  739:   //+1 Card
        1:  740:   drawCard(currentPlayer, state);
call    0 returned 100%
        -:  741:			
        -:  742:   //+1 Actions
        1:  743:   state->numActions++;
        -:  744:			
        -:  745:   //discard card from hand
        1:  746:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  747:   
        1:  748:	return 0;
        -:  749:}
        -:  750://****************************************************************************
        -:  751:
        -:  752:
        -:  753:
        -:  754:
        -:  755:
        -:  756:
function cardEffect called 4 returned 100% blocks executed 16%
        4:  757:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  758:{
        -:  759:  int i;
        -:  760:  int j;
        -:  761:  int k;
        -:  762:  int x;
        -:  763:  int index;
        4:  764:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  765:  int nextPlayer = currentPlayer + 1;
        -:  766:
        4:  767:  int tributeRevealedCards[2] = {-1, -1};
        -:  768:  int temphand[MAX_HAND];// moved above the if statement
        4:  769:  int drawntreasure=0;
        -:  770:  int cardDrawn;
        4:  771:  int z = 0;// this is the counter for the temp hand
        4:  772:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  773:    nextPlayer = 0;
        -:  774:  }
        -:  775:  
        -:  776:	
        -:  777:  //uses switch to select card and perform actions
        4:  778:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  779:    {
        -:  780:    case adventurer:
        -:  781:   
        1:  782:		adventurerEffect( currentPlayer, state, drawntreasure, cardDrawn, temphand, z );
call    0 returned 100%
        -:  783:
        -:  784:	//   while(drawntreasure<2){
        -:  785:	//if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  786:	// shuffle(currentPlayer, state);
        -:  787:	//}
        -:  788:	//drawCard(currentPlayer, state);
        -:  789:	//cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  790:	//if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  791:	// drawntreasure++;
        -:  792:	//else{
        -:  793:	//  temphand[z]=cardDrawn;
        -:  794:	//  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  795:	//  z++;
        -:  796:	//}
        -:  797:   //  }
        -:  798:   //   while(z-1>=0){
        -:  799:	//state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  800:	//z=z-1;
        -:  801:   //   }
        -:  802:   //      return 0;
        -:  803:			
        -:  804:    case council_room:
        -:  805:
        1:  806:		councilRoomEffect( currentPlayer, state, handPos );
call    0 returned 100%
        -:  807:      //+4 Cards
        -:  808:      //for (i = 0; i < 4; i++)
        -:  809:	//{
        -:  810:	  //drawCard(currentPlayer, state);
        -:  811:	//}
        -:  812:			
        -:  813:      //+1 Buy
        -:  814:    //  state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
        -:  817:      //for (i = 0; i < state->numPlayers; i++)
        -:  818:	//{
        -:  819:	  //if ( i != currentPlayer )
        -:  820:	    //{
        -:  821:	     // drawCard(i, state);
        -:  822:	    //}
        -:  823:   //	}
        -:  824:			
        -:  825:      //put played card in played card pile
        -:  826:   //   discardCard(handPos, currentPlayer, state, 0);
        -:  827:			
        -:  828:     // return 0;
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
       11:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       10:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
        1:  840:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  841:      x = 1;//Condition to loop on
        3:  842:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  843:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
        -:  850:	}
        1:  851:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  852:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
        -:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
        1:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
       11:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  876:	state->hand[currentPlayer][i] = temphand[i];
       10:  877:	temphand[i] = -1;
        -:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
        1:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
        -:  948:      
        1:  949:		smithyEffect( currentPlayer, state, handPos );
call    0 returned 100%
        -:  950:		
        -:  951:		//+3 Cards
        -:  952:      //for (i = 0; i < 3; i++)
        -:  953:		//{
        -:  954:	  	//	drawCard(currentPlayer, state);
        -:  955:		//}
        -:  956:			
        -:  957:      //discard card from hand
        -:  958:      //discardCard(handPos, currentPlayer, state, 0);
        -:  959:      //return 0;
        -:  960:		
        -:  961:    case village:
        -:  962:		
        2:  963:		villageEffect( currentPlayer, state, handPos );
call    0 returned 100%
        -:  964:      
        -:  965:		//+1 Card
        -:  966:      //drawCard(currentPlayer, state);
        -:  967:			
        -:  968:      //+2 Actions
        -:  969:      //state->numActions = state->numActions + 2;
        -:  970:			
        -:  971:      //discard played card from hand
        -:  972:      //discardCard(handPos, currentPlayer, state, 0);
        -:  973:      //return 0;
        -:  974:		
        -:  975:    case baron:
        2:  976:      state->numBuys++;//Increase buys by 1!
        2:  977:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  978:	int p = 0;//Iterator for hand!
    #####:  979:	int card_not_discarded = 1;//Flag for discard set!
    #####:  980:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  981:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  982:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  983:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  984:	    state->discardCount[currentPlayer]++;
    #####:  985:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  986:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  987:	    }
    #####:  988:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  989:	    state->handCount[currentPlayer]--;
    #####:  990:	    card_not_discarded = 0;//Exit the loop
        -:  991:	  }
    #####:  992:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  993:	    if(DEBUG) {
        -:  994:	      printf("No estate cards in your hand, invalid choice\n");
        -:  995:	      printf("Must gain an estate if there are any\n");
        -:  996:	    }
    #####:  997:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  998:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  999:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1000:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1001:		isGameOver(state);
call    0 never executed
        -: 1002:	      }
        -: 1003:	    }
    #####: 1004:	    card_not_discarded = 0;//Exit the loop
        -: 1005:	  }
        -: 1006:			    
        -: 1007:	  else{
    #####: 1008:	    p++;//Next card
        -: 1009:	  }
        -: 1010:	}
        -: 1011:      }
        -: 1012:			    
        -: 1013:      else{
        2: 1014:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1015:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        2: 1016:	  state->supplyCount[estate]--;//Decrement Estates
        2: 1017:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1018:	    isGameOver(state);
call    0 never executed
        -: 1019:	  }
        -: 1020:	}
        -: 1021:      }
        -: 1022:	    
        -: 1023:      
        2: 1024:      return 0;
        -: 1025:		
        -: 1026:    case great_hall:
        -: 1027:
        1: 1028:		greatHallEffect( currentPlayer, state, handPos );
call    0 returned 100%
        -: 1029:    
        -: 1030:	 	//+1 Card
        -: 1031:      //drawCard(currentPlayer, state);
        -: 1032:			
        -: 1033:      //+1 Actions
        -: 1034:      //state->numActions++;
        -: 1035:			
        -: 1036:      //discard card from hand
        -: 1037:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1038:      //return 0;
        -: 1039:		
        -: 1040:    case minion:
        -: 1041:      //+1 action
        1: 1042:      state->numActions++;
        -: 1043:			
        -: 1044:      //discard card from hand
        1: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1046:			
        1: 1047:      if (choice1)		//+2 coins
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1048:	{
    #####: 1049:	  state->coins = state->coins + 2;
        -: 1050:	}
        -: 1051:			
        1: 1052:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1053:	{
        -: 1054:	  //discard hand
    #####: 1055:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1056:	    {
    #####: 1057:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1058:	    }
        -: 1059:				
        -: 1060:	  //draw 4
    #####: 1061:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	    {
    #####: 1063:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //other players discard hand and redraw if hand size > 4
    #####: 1067:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1070:		{
    #####: 1071:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
        -: 1073:		      //discard hand
    #####: 1074:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1075:			{
    #####: 1076:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1077:			}
        -: 1078:							
        -: 1079:		      //draw 4
    #####: 1080:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  drawCard(i, state);
call    0 never executed
        -: 1083:			}
        -: 1084:		    }
        -: 1085:		}
        -: 1086:	    }
        -: 1087:				
        -: 1088:	}
        1: 1089:      return 0;
        -: 1090:		
        -: 1091:    case steward:
    #####: 1092:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
        -: 1094:	  //+2 cards
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1096:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1097:	}
    #####: 1098:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 coins
    #####: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:      else
        -: 1104:	{
        -: 1105:	  //trash 2 cards in hand
    #####: 1106:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1107:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1108:	}
        -: 1109:			
        -: 1110:      //discard card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1159:	  state->coins += 2;
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1163:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1164:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:      j = 0;		//used to check if player has enough cards to discard
        -: 1175:
    #####: 1176:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1177:	{
    #####: 1178:	  return -1;				
        -: 1179:	}
        -: 1180:
    #####: 1181:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:
    #####: 1186:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1189:	    {
    #####: 1190:	      j++;
        -: 1191:	    }
        -: 1192:	}
    #####: 1193:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  return -1;				
        -: 1196:	}
        -: 1197:
        -: 1198:      if (DEBUG) 
        -: 1199:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1200:
        -: 1201:      //increase supply count for choosen card by amount being discarded
    #####: 1202:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1203:			
        -: 1204:      //each other player gains a copy of revealed card
    #####: 1205:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1208:	    {
    #####: 1209:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1210:	    }
        -: 1211:	}
        -: 1212:
        -: 1213:      //discard played card from hand
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1215:
        -: 1216:      //trash copies of cards returned to supply
    #####: 1217:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1222:		{
    #####: 1223:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1224:		  break;
        -: 1225:		}
        -: 1226:	    }
        -: 1227:	}			
        -: 1228:
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case cutpurse:
        -: 1232:
    #####: 1233:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1234:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1237:	    {
    #####: 1238:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:		{
    #####: 1240:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1241:		    {
    #####: 1242:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1243:		      break;
        -: 1244:		    }
    #####: 1245:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1246:		    {
    #####: 1247:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1248:			{
        -: 1249:			  if (DEBUG)
        -: 1250:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1251:			}	
    #####: 1252:		      break;
        -: 1253:		    }		
        -: 1254:		}
        -: 1255:					
        -: 1256:	    }
        -: 1257:				
        -: 1258:	}				
        -: 1259:
        -: 1260:      //discard played card from hand
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1262:
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:		
        -: 1266:    case embargo: 
        -: 1267:      //+2 Coins
    #####: 1268:      state->coins = state->coins + 2;
        -: 1269:			
        -: 1270:      //see if selected pile is in play
    #####: 1271:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1272:	{
    #####: 1273:	  return -1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //add embargo token to selected supply pile
    #####: 1277:      state->embargoTokens[choice1]++;
        -: 1278:			
        -: 1279:      //trash card
    #####: 1280:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case outpost:
        -: 1284:      //set outpost flag
    #####: 1285:      state->outpostPlayed++;
        -: 1286:			
        -: 1287:      //discard card
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1289:      return 0;
        -: 1290:		
        -: 1291:    case salvager:
        -: 1292:      //+1 buy
    #####: 1293:      state->numBuys++;
        -: 1294:			
    #####: 1295:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
        -: 1297:	  //gain coins equal to trashed card
    #####: 1298:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1299:	  //trash card
    #####: 1300:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1301:	}
        -: 1302:			
        -: 1303:      //discard card
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case sea_hag:
    #####: 1308:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1309:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1310:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1311:	  state->discardCount[i]++;
    #####: 1312:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1313:	}
        -: 1314:      }
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case treasure_map:
        -: 1318:      //search hand for another treasure_map
    #####: 1319:      index = -1;
    #####: 1320:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1321:	{
    #####: 1322:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1323:	    {
    #####: 1324:	      index = i;
    #####: 1325:	      break;
        -: 1326:	    }
        -: 1327:	}
    #####: 1328:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1329:	{
        -: 1330:	  //trash both treasure cards
    #####: 1331:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1332:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1333:
        -: 1334:	  //gain 4 Gold cards
    #####: 1335:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1336:	    {
    #####: 1337:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1338:	    }
        -: 1339:				
        -: 1340:	  //return success
    #####: 1341:	  return 1;
        -: 1342:	}
        -: 1343:			
        -: 1344:      //no second treasure_map found in hand
    #####: 1345:      return -1;
        -: 1346:    }
        -: 1347:	
    #####: 1348:  return -1;
        -: 1349:}
        -: 1350:
function discardCard called 6 returned 100% blocks executed 89%
        6: 1351:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1352:{
        -: 1353:	
        -: 1354:  //if card is not trashed, added to Played pile 
        6: 1355:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1356:    {
        -: 1357:      //add card to played pile
        6: 1358:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1359:      state->playedCardCount++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //set played card to -1
        6: 1363:  state->hand[currentPlayer][handPos] = -1;
        -: 1364:	
        -: 1365:  //remove card from player's hand
        6: 1366:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
        1: 1369:      state->handCount[currentPlayer]--;
        -: 1370:    }
        5: 1371:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1372:    {
        -: 1373:      //reduce number of cards in hand
    #####: 1374:      state->handCount[currentPlayer]--;
        -: 1375:    }
        -: 1376:  else 	
        -: 1377:    {
        -: 1378:      //replace discarded card with last card in hand
        5: 1379:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1380:      //set last card to -1
        5: 1381:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1382:      //reduce number of cards in hand
        5: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:	
        6: 1386:  return 0;
        -: 1387:}
        -: 1388:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1389:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1390:{
        -: 1391:  //Note: supplyPos is enum of choosen card
        -: 1392:	
        -: 1393:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1394:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1395:    {
    #####: 1396:      return -1;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //added card for [whoseTurn] current player:
        -: 1400:  // toFlag = 0 : add to discard
        -: 1401:  // toFlag = 1 : add to deck
        -: 1402:  // toFlag = 2 : add to hand
        -: 1403:
        3: 1404:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1405:    {
    #####: 1406:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1407:      state->deckCount[player]++;
        -: 1408:    }
        3: 1409:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1410:    {
    #####: 1411:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1412:      state->handCount[player]++;
        -: 1413:    }
        -: 1414:  else
        -: 1415:    {
        3: 1416:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1417:      state->discardCount[player]++;
        -: 1418:    }
        -: 1419:	
        -: 1420:  //decrease number in supply pile
        3: 1421:  state->supplyCount[supplyPos]--;
        -: 1422:	 
        3: 1423:  return 0;
        -: 1424:}
        -: 1425:
function updateCoins called 9 returned 100% blocks executed 82%
        9: 1426:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1427:{
        -: 1428:  int i;
        -: 1429:	
        -: 1430:  //reset coin count
        9: 1431:  state->coins = 0;
        -: 1432:
        -: 1433:  //add coins for each Treasure card in player's hand
       58: 1434:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1435:    {
       49: 1436:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1437:	{
       32: 1438:	  state->coins += 1;
        -: 1439:	}
       17: 1440:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1441:	{
    #####: 1442:	  state->coins += 2;
        -: 1443:	}
       17: 1444:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1445:	{
    #####: 1446:	  state->coins += 3;
        -: 1447:	}	
        -: 1448:    }	
        -: 1449:
        -: 1450:  //add bonus
        9: 1451:  state->coins += bonus;
        -: 1452:
        9: 1453:  return 0;
        -: 1454:}
        -: 1455:
        -: 1456:
        -: 1457://end of dominion.c
        -: 1458:
